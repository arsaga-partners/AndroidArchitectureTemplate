class Version {
    static final code = 1
    static final name = "1.0.0"
}

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = "1.5.21"
    ext.hilt_version = "2.32-alpha"
    ext.retrofit_version = "2.9.0"
    ext.okhttp_version = '4.9.1'
    ext.nav_version = "2.3.3"
    ext.live_data_version = "2.2.0"
    ext.coroutine_version = '1.4.2'
    ext.glide_version = "4.11.0"
    ext.biometric_version = "1.1.0"
    repositories {
        mavenCentral()
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
        classpath "com.google.dagger:hilt-android-gradle-plugin:$hilt_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.8'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.7.1'
    }
}

subprojects {
    afterEvaluate { subProject ->
        if (subProject.hasProperty('android')) {
            dependencies {

                implementation "com.jakewharton.timber:timber:4.7.1"

                switch (subProject.toString()) {
                    case "project ':app'":
                        implementation 'androidx.appcompat:appcompat:1.3.0'
                        implementation 'com.google.android.material:material:1.3.0'
                        implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

                        def nav_version = "2.3.3"
                        implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
                        implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
                        break
                }

                // レイヤー毎のモジュール構成
//                switch (subProject.toString()) {
//                    case "project ':app'":
//                        getProject()
//                                .getRootProject()
//                                .getSubprojects()
//                                .forEach {
//                                    def denyModulePathList = [
//                                            ":app",
//                                            ":presentation",
//                                            ":presentation:viewModel",
//                                            ":domain",
//                                            ":domain:service",
//                                            ":domain:entity"
//                                    ]
//                                    println(it.name + " try exist")
//                                    if (!denyModulePathList.contains(it.path)) {
//                                        println(it.path + " exist")
//                                        implementation project(it.path)
//                                    } else {
//                                        println(it.path + " not exist")
//                                    }
//                                }
//                        break
//
//                    case "project ':domain:api'":
//                        implementation project(":domain:entity")
//                        api project(":extensions:gateway")
//                        break
//
//                    case "project ':domain:db'":
//                        implementation project(":domain:entity")
//                        break

//                    case ~/project ':presentation:viewModel:(.*)'/:
//                        api project(":presentation:viewModel:core")
//                        api project(":domain:service:core")
//                        api project(":domain:entity:core")
//                        break
//
//                    case ~/project ':domain:service:(.*)'/:
//                        api project(":domain:service:core")
//                        api project(":domain:entity:core")
//                        break
//
//                    case ~/project ':domain:entity:(.*)'/:
//                        api project(":domain:entity:core")
//                        break
//                }
            }

            android {
                def version = new Version()
                compileSdkVersion 30
                defaultConfig {
                    versionCode = version.code
                    versionName = version.name
                    targetSdkVersion 30
                    buildConfigField("String", "APP_VERSION", "\"" + versionName + "\"")
                    manifestPlaceholders = manifestPlaceholders + [
                            appName: "@string/app_store_name"
                    ]
                }
                kotlinOptions {
                    jvmTarget = '1.8'
                }
                buildFeatures {
                    dataBinding true
                    viewBinding true
                }
            }
        }
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}